#define LGFX_LCD4_3
// #define LGFX_LCD7_0

//.................ฟังชั่น.....Library...........
#include <Arduino.h>
#include <Wire.h>
#include <lv_conf.h>
#include <lvgl.h>
#include "./gui/gui.h"
#include <EEPROM.h>

#define CUTTER_SENSOR 11
#define TACHMETER_SENSOR 12

#define _UI_RPM 0
#define _UI_CPM 1
int _UI_CURRENT_SETTING;

bool AUTOTUNE_STATE = false; //
int AUTOTUNE_TIMEOUT = 60;
unsigned long CUR_TIME_AUTOTUNE = 0;
int AUTOTUNE_ROUND_COUNT = 0;
int AUTOTUNE_CUTTER_COUNT = 0;
int MAX_RPM = 0;
int MAX_CPM = 0;
int EEPROM_MAX_RPM_ADDRESS = 0;
int EEPROM_MAX_CPM_ADDRESS = 10;

int currentCutterSensor = 0;
int previousCutterSensor = 0;

int currentTachometerSensor = 0;
int previousTachometerSensor = 0;
bool isTachometerRunning = false;

bool isRunning = false;
unsigned long currentIsRunningTime = 0;
unsigned long previousIsRunningTime = 0;

unsigned long timestamp = 0;
unsigned long tachometerTime = 0;
unsigned long roundsTime = 0;
int rounds = 0;

// ค้นหา UI settings จาก _UI_CURRENT_SETTING
lv_obj_t *FIND_UI_SETTING_PANEL(int panel)
{
  switch (panel) // ฟังชั่น รอรีเทริน
  {
  case _UI_RPM:
    return ui_SetRPM; // ส่งค่ากลับไปยัง lv_label_get_text
  case _UI_CPM:
    return ui_SetCPM; // ส่งค่ากลับไปยัง lv_label_get_text
  }
}

//  ฟังชั่นกดป้อนข้อมูลการตั้งค่า
void EventSettingHandler(lv_event_t *e)
{
  lv_event_code_t event_code = lv_event_get_code(e);
  const int UI_CURRENT_SETTING = (const int)lv_event_get_user_data(e);                   // เก็บค่าเป็น....คอนอิ้น settimer  = เก็บค่า....คอนอิ้น....lv_event_get_user_data(e)
  _UI_CURRENT_SETTING = UI_CURRENT_SETTING;                                              //....ใช้ตัวแปร int มาเก็บค่าของ consrt int
  const char *cur_value = lv_label_get_text(FIND_UI_SETTING_PANEL(_UI_CURRENT_SETTING)); // สั่ง cur_value มีค่าเท่ากับ lv_label_get_text(timerPanel(cur_time_panel)
  _ui_flag_modify(ui_Panelkeyboad, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);          // สั่งแสดงคีบอร์ด
}

//  บันทึกการตั้งค่า
void SaveSettingValue(lv_event_t *e)
{
  _ui_flag_modify(ui_Panelkeyboad, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_ADD); // สั่งปิดคีบอร๋ด
  const char *time_textarea = lv_textarea_get_text(ui_TextAreakey);          //....ตั้งตัวแปรเป็น..const char เท่ากับ lv_textarea_get_text

  if (String(time_textarea) != "")
  {
    lv_label_set_text(FIND_UI_SETTING_PANEL(_UI_CURRENT_SETTING), time_textarea); //....สั่งเข้า return และ เช็ทตัวเลขบนหน้าจอ
    lv_textarea_set_text(ui_TextAreakey, "");                                     // สั่งเคลียร์คีบอร์ด

    if (_UI_CURRENT_SETTING == _UI_RPM)
    {
      MAX_RPM = AUTOTUNE_ROUND_COUNT;
      EEPROM.writeInt(EEPROM_MAX_RPM_ADDRESS, MAX_RPM);
    }
    else if (_UI_CURRENT_SETTING == _UI_CPM)
    {
      MAX_CPM = AUTOTUNE_CUTTER_COUNT;
      EEPROM.writeInt(EEPROM_MAX_CPM_ADDRESS, MAX_CPM);
    }
    EEPROM.commit();
  }
}

// ฟังชั่นซ่อนคีบอร์ด
void HiddenKeyboard(lv_event_t *e)
{
  _ui_flag_modify(ui_Panelkeyboad, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_ADD); // สั่งปิดคีบอร๋ด
}

// ################################## ปรับการตั้งค่าอัตโนมัติ ##################################
void AutoTune(lv_event_t *e)
{
  lv_obj_t *target = lv_event_get_target(e);
  if (AUTOTUNE_STATE == false)
  {
    lv_obj_set_style_bg_color(target, lv_color_hex(0x18EE00), 0);
    AUTOTUNE_STATE = true;
    AUTOTUNE_ROUND_COUNT = 0;
    AUTOTUNE_CUTTER_COUNT = 0;
    CUR_TIME_AUTOTUNE = millis();
  }
  else
  {
    AUTOTUNE_STATE = false;
    AUTOTUNE_ROUND_COUNT = 0;
    AUTOTUNE_CUTTER_COUNT = 0;
    CUR_TIME_AUTOTUNE = 0;
    lv_label_set_text(ui_AutoTuneTimer, String(AUTOTUNE_TIMEOUT).c_str());
    lv_obj_set_style_bg_color(target, lv_color_hex(0x0F4509), 0);
  }
}

void AutoTuneIsRunning()
{
  // จับเวลา
  if (millis() - CUR_TIME_AUTOTUNE < (AUTOTUNE_TIMEOUT * 1000UL))
  {
    currentTachometerSensor = digitalRead(TACHMETER_SENSOR);
    if (currentTachometerSensor == 0 && previousTachometerSensor == 1)
    {
      AUTOTUNE_ROUND_COUNT++;
      Serial.print("AUTOTUNE_ROUND_COUNT: ");
      Serial.println(AUTOTUNE_ROUND_COUNT);
    }
    previousTachometerSensor = currentTachometerSensor;

    currentCutterSensor = digitalRead(CUTTER_SENSOR);
    if (currentCutterSensor == 0 && previousCutterSensor == 1)
    {
      AUTOTUNE_CUTTER_COUNT++;
      Serial.print("AUTOTUNE_CUTTER_COUNT: ");
      Serial.println(AUTOTUNE_CUTTER_COUNT);
    }
    previousCutterSensor = currentCutterSensor;

    int timeout = AUTOTUNE_TIMEOUT - ((millis() - CUR_TIME_AUTOTUNE) / 1000);
    lv_label_set_text(ui_AutoTuneTimer, String(timeout).c_str());

    lv_label_set_text(ui_SetRPM, String(AUTOTUNE_ROUND_COUNT).c_str());
    lv_label_set_text(ui_SetCPM, String(AUTOTUNE_CUTTER_COUNT).c_str());
  }
  else
  {
    AUTOTUNE_STATE = false;
    AUTOTUNE_ROUND_COUNT = 0;
    AUTOTUNE_CUTTER_COUNT = 0;
    CUR_TIME_AUTOTUNE = 0;

    lv_obj_set_style_bg_color(ui_AutoTuneBTN, lv_color_hex(0x0F4509), 0);
    lv_label_set_text(ui_AutoTuneTimer, String(AUTOTUNE_TIMEOUT).c_str());
    MAX_RPM = AUTOTUNE_ROUND_COUNT;
    MAX_CPM = AUTOTUNE_CUTTER_COUNT;
    EEPROM.writeInt(EEPROM_MAX_RPM_ADDRESS, MAX_RPM);
    EEPROM.writeInt(EEPROM_MAX_CPM_ADDRESS, MAX_CPM);
    EEPROM.commit();
  }
}

// ################################## อ่านค่าจากเซ็นต์เซอร์ ##################################
void ReadSensor()
{
  currentTachometerSensor = digitalRead(TACHMETER_SENSOR);
  if (currentTachometerSensor == 0 && previousTachometerSensor == 1)
  {
    isTachometerRunning = !isTachometerRunning;
    currentIsRunningTime = millis();
    isRunning = true;
    if (!isTachometerRunning)
    {
      roundsTime = (60UL * 1000UL) / tachometerTime;
      Serial.print("tachometerTime: ");
      Serial.print(tachometerTime);
      Serial.print(" roundsTime: ");
      Serial.println(roundsTime);
    }
  }

  previousTachometerSensor = currentTachometerSensor;

  if (isTachometerRunning && isRunning)
  {
    tachometerTime = millis() - timestamp;
    rounds = map(roundsTime, 0, MAX_RPM, 0, MAX_CPM);
  }
  else
  {
    timestamp = millis();
  }

  if (millis() - currentIsRunningTime > 1000)
  {
    isRunning = false;
    rounds = 0;
  }

  lv_label_set_text(ui_RPM, String(rounds).c_str());
  lv_label_set_text(ui_CPM, String(rounds).c_str());
}

void setup()
{
  // ห้ามลบ
  Serial.begin(115200);
  EEPROM.begin(500); // ประกาศมาใช้งานบันทึกข้อมูล
  gui_start();
  gfx.setBrightness(128);

  pinMode(CUTTER_SENSOR, INPUT_PULLUP);
  pinMode(TACHMETER_SENSOR, INPUT_PULLUP);

  // เพิ่ม EVENTS LISTENER
  lv_obj_add_event_cb(ui_PanelSetRPM, EventSettingHandler, LV_EVENT_CLICKED, (void *)_UI_RPM); // ตั้งค่า จำนวนรอบ/นาที
  lv_obj_add_event_cb(ui_PanelSetCPM, EventSettingHandler, LV_EVENT_CLICKED, (void *)_UI_CPM); // ตั้งค่า จำนวนตัด/นาที
  lv_obj_add_event_cb(ui_Keyboard, SaveSettingValue, LV_EVENT_READY, NULL);                    // บันทึกการตั้งค่า
  lv_obj_add_event_cb(ui_Panel8, HiddenKeyboard, LV_EVENT_CLICKED, NULL);                      // สั่งปิดคีบอร์ด

  lv_obj_add_event_cb(ui_AutoTuneBTN, AutoTune, LV_EVENT_CLICKED, NULL);
  lv_label_set_text(ui_AutoTuneTimer, String(AUTOTUNE_TIMEOUT).c_str());

  int READ_MAX_RPM = EEPROM.read(EEPROM_MAX_RPM_ADDRESS);
  int READ_MAX_CPM = EEPROM.read(EEPROM_MAX_CPM_ADDRESS);
  MAX_RPM = READ_MAX_RPM;
  MAX_CPM = READ_MAX_CPM;
  lv_label_set_text(ui_SetRPM, String(MAX_RPM).c_str());
  lv_label_set_text(ui_SetCPM, String(MAX_CPM).c_str());
}

void loop()
{
  // ห้ามลบ
  lv_timer_handler();
  delay(5);

  // โหมดออโต้จูน
  if (AUTOTUNE_STATE)
  {
    AutoTuneIsRunning();
  }
  // โหมดอ่านค่าเซ็นเซอร์
  else
  {
    ReadSensor();
  }
}
